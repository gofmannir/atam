.global _start

.section .text

  movq root, %rdi
  xor %r8, %r8
  movl __ExpectedArraySize, %r8d
  movq $__ExpectedArray, %r9
  movq $0, %r10
  call rec

  cmp %r10, %r8
  jne bad_exit
  
  movq $60, %rax
  movq $0, %rdi
  syscall

bad_exit:
  movq $60, %rax
  movq $1, %rdi
  syscall

rec:
  pushq %rdi
  movq (%rdi), %r11
  cmp $0, %r11
  je skip_left
  movq %r11, %rdi
  call rec
  movq (%rsp), %rdi
skip_left:
  cmpq %r8, %r10
  je bad_exit
  movl 8(%rdi), %eax
  movl (%r9, %r10, 4), %edx
  cmpl %eax, %edx
  jne bad_exit
  inc %r10

  movq 12(%rdi), %r11
  cmp $0, %r11
  je skip_right
  movq %r11, %rdi
  call rec
skip_right:
  popq %rdi
  ret


.section .data
__ExpectedArray: .int 717421537, 819812302
__Garbage_938953289: .byte 80, 44, 194
__ExpectedArraySize: .int 2
__Garbage_728032480: .byte 71
__Nodes:
.quad 0
.int 819812302
.quad 0
__Garbage_363415604: .byte 194, 184, 32, 63, 71
root:
.quad __Nodes + 0
__Garbage_661994766: .byte 237, 201, 89, 117, 102
node:
.quad 173639036
.int 717421537
.quad -445055718
